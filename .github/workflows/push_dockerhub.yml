---
  # DANS CE JOB NOUS DEVONS METTRE LES COMMANDES SUIVANTE POUR TAG L'IMAGE:
  # git tag <nom_du_tag>
  # git push origin <nom_du_tag>
  # (par default il prendra le nom de la branch)

  name: published image-dockerhub-go
  
  on:
    push:
      branches:
        - dockerhub
      # Déclenche pour tout tag commençant par 'v', comme 'v0.1', 'v1.0', etc... (dans mon cas ca évite que-
      tags:
        - 'v*'

    # Ajout du cron    
    #schedule:
    #  - cron: '*/5 * * * *'

    # Permet de déclencher le workflow manuellement  
    workflow_dispatch:
  
  env:
    REGISTRY: "docker.io" 
    IMAGE_NAME: "matthieu3m/image-dockerhub-go" 
         
  
  permissions: write-all
  
  jobs:
    push_to_registry:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest

      strategy:
        matrix:
          goarch: [amd64, arm64, arm] # Ici je viens définir les différente architecture cibles pour la matrix (il y aura donc 3 jobs).
   
      steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 1
  
        - name: login to docker Hub
          uses: docker/login-action@v2
          with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKER_PASSWORD }}

        - name: Set up Docker Buildx # Cette step nous sert à Set Docker Buildx pour charger nos images pour les différent processeurs plus tard dans le job.
          run: |
            docker buildx create --use
  
        - name: Extract metadata (tags, labels) for Docker
          id: meta
          uses: docker/metadata-action@v2
          with:
            images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}} 
        
        - name: Build and push Docker image
          id: push 
          uses: docker/build-push-action@v2
          with:
            context: .
            file: ./Dockerfile
            push: true
            tags: ${{ steps.meta.outputs.tags }} #
            platforms: linux/arm64,linux/amd64,linux/arm # avec l'option platforms et la matrix defini au dessus nous ajoutons des options pour les differents Proce ancienne version: linux/arm64,linux/amd64
            build-args: | # Grace à build-args je peux faire matcher GOARCH de mon Dockerfile avec les valeurs de la matrix
              GOARCH=${{ matrix.goarch }}  
            
            labels: ${{ steps.meta.outputs.labels }}
  
        - name: Generate artifact attestation
          uses: actions/attest-build-provenance@v2
          with: 
            subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
            #subject-digest: #$#{{ steps.push.outputs.digest }}
            push-to-registry: true
            github-token: ${{ secrets.GITHUB_TOKEN }}
